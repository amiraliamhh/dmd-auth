"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _bcryptjs = require("bcryptjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserSchema = new _mongoose.default.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    validate: {
      validator: emailValidator,
      msg: 'email validation failed.'
    }
  },
  password: {
    type: String,
    required: true
  },
  first_name: {
    type: String
  },
  last_name: {
    type: String
  },
  dashboards: [{
    name: String,
    options: {
      type: _mongoose.default.Schema.Types.Mixed
    },
    widgets: [String]
  }],
  account_type: {
    type: String,
    enum: ['free', 'premium'],
    default: 'free'
  }
});
UserSchema.pre('save', function (done) {
  var _this = this;

  Promise.all([hashPass(_this), emailToLower(_this)]).then(function () {
    done();
  }).catch(console.error);
});

function emailValidator(email) {
  return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
} // t: "this" in context


function hashPass(t) {
  return new Promise(function (resolve, reject) {
    if (t.password.length < 8) {
      reject('weakpass');
      return;
    }

    (0, _bcryptjs.genSalt)(10).then(function (salt) {
      (0, _bcryptjs.hash)(t.password, salt).then(function (hash) {
        t.password = hash;
        resolve();
      }).catch(reject);
    }).catch(reject);
  });
}

function emailToLower(t) {
  return new Promise(function (resolve, reject) {
    t.email = t.email.toLowerCase();
    resolve();
  });
}

var _default = _mongoose.default.model('users', UserSchema);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbC91c2VyLnRzIl0sIm5hbWVzIjpbIlVzZXJTY2hlbWEiLCJtb25nb29zZSIsIlNjaGVtYSIsImVtYWlsIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidW5pcXVlIiwidmFsaWRhdGUiLCJ2YWxpZGF0b3IiLCJlbWFpbFZhbGlkYXRvciIsIm1zZyIsInBhc3N3b3JkIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImRhc2hib2FyZHMiLCJuYW1lIiwib3B0aW9ucyIsIlR5cGVzIiwiTWl4ZWQiLCJ3aWRnZXRzIiwiYWNjb3VudF90eXBlIiwiZW51bSIsImRlZmF1bHQiLCJwcmUiLCJkb25lIiwiX3RoaXMiLCJQcm9taXNlIiwiYWxsIiwiaGFzaFBhc3MiLCJlbWFpbFRvTG93ZXIiLCJ0aGVuIiwiY2F0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJ0ZXN0IiwidCIsInJlc29sdmUiLCJyZWplY3QiLCJsZW5ndGgiLCJzYWx0IiwiaGFzaCIsInRvTG93ZXJDYXNlIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQVNBLElBQU1BLFVBQVUsR0FBRyxJQUFJQyxrQkFBU0MsTUFBYixDQUFvQjtBQUNyQ0MsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLElBQUksRUFBRUMsTUFERDtBQUVMQyxJQUFBQSxRQUFRLEVBQUUsSUFGTDtBQUdMQyxJQUFBQSxNQUFNLEVBQUUsSUFISDtBQUlMQyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsU0FBUyxFQUFFQyxjQURIO0FBRVJDLE1BQUFBLEdBQUcsRUFBRTtBQUZHO0FBSkwsR0FEOEI7QUFVckNDLEVBQUFBLFFBQVEsRUFBRTtBQUNSUixJQUFBQSxJQUFJLEVBQUVDLE1BREU7QUFFUkMsSUFBQUEsUUFBUSxFQUFFO0FBRkYsR0FWMkI7QUFjckNPLEVBQUFBLFVBQVUsRUFBRTtBQUNWVCxJQUFBQSxJQUFJLEVBQUVDO0FBREksR0FkeUI7QUFpQnJDUyxFQUFBQSxTQUFTLEVBQUU7QUFDVFYsSUFBQUEsSUFBSSxFQUFFQztBQURHLEdBakIwQjtBQW9CckNVLEVBQUFBLFVBQVUsRUFBRSxDQUFDO0FBQ1hDLElBQUFBLElBQUksRUFBRVgsTUFESztBQUVYWSxJQUFBQSxPQUFPLEVBQUU7QUFDUGIsTUFBQUEsSUFBSSxFQUFFSCxrQkFBU0MsTUFBVCxDQUFnQmdCLEtBQWhCLENBQXNCQztBQURyQixLQUZFO0FBS1hDLElBQUFBLE9BQU8sRUFBRSxDQUFDZixNQUFEO0FBTEUsR0FBRCxDQXBCeUI7QUEyQnJDZ0IsRUFBQUEsWUFBWSxFQUFFO0FBQ1pqQixJQUFBQSxJQUFJLEVBQUVDLE1BRE07QUFFWmlCLElBQUFBLElBQUksRUFBRSxDQUNKLE1BREksRUFFSixTQUZJLENBRk07QUFNWkMsSUFBQUEsT0FBTyxFQUFFO0FBTkc7QUEzQnVCLENBQXBCLENBQW5CO0FBcUNBdkIsVUFBVSxDQUFDd0IsR0FBWCxDQUFlLE1BQWYsRUFBdUIsVUFBU0MsSUFBVCxFQUFlO0FBQ3BDLE1BQUlDLEtBQUssR0FBVSxJQUFuQjs7QUFFQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksQ0FDVkMsUUFBUSxDQUFDSCxLQUFELENBREUsRUFFVkksWUFBWSxDQUFDSixLQUFELENBRkYsQ0FBWixFQUlDSyxJQUpELENBSU0sWUFBTTtBQUFDTixJQUFBQSxJQUFJO0FBQUcsR0FKcEIsRUFLQ08sS0FMRCxDQUtPQyxPQUFPLENBQUNDLEtBTGY7QUFPRCxDQVZEOztBQVlBLFNBQVN4QixjQUFULENBQXdCUCxLQUF4QixFQUFnRDtBQUM5QyxTQUFPLDBKQUEwSmdDLElBQTFKLENBQStKaEMsS0FBL0osQ0FBUDtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBUzBCLFFBQVQsQ0FBa0JPLENBQWxCLEVBQTBDO0FBQ3hDLFNBQU8sSUFBSVQsT0FBSixDQUFZLFVBQUNVLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFhRixDQUFDLENBQUN4QixRQUFYLENBQXFCMkIsTUFBckIsR0FBOEIsQ0FBbEMsRUFBcUM7QUFDbkNELE1BQUFBLE1BQU0sQ0FBQyxVQUFELENBQU47QUFFQTtBQUNEOztBQUVELDJCQUFRLEVBQVIsRUFDQ1AsSUFERCxDQUNNLFVBQUNTLElBQUQsRUFBa0I7QUFDdEIsMEJBQWFKLENBQUMsQ0FBQ3hCLFFBQWYsRUFBeUI0QixJQUF6QixFQUNDVCxJQURELENBQ00sVUFBQ1UsSUFBRCxFQUFrQjtBQUN0QkwsUUFBQUEsQ0FBQyxDQUFDeEIsUUFBRixHQUFhNkIsSUFBYjtBQUNBSixRQUFBQSxPQUFPO0FBQ1IsT0FKRCxFQUtDTCxLQUxELENBS09NLE1BTFA7QUFNRCxLQVJELEVBU0NOLEtBVEQsQ0FTT00sTUFUUDtBQVVELEdBakJNLENBQVA7QUFrQkQ7O0FBRUQsU0FBU1IsWUFBVCxDQUFzQk0sQ0FBdEIsRUFBOEM7QUFDNUMsU0FBTyxJQUFJVCxPQUFKLENBQVksVUFBQ1UsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDRixJQUFBQSxDQUFDLENBQUNqQyxLQUFGLEdBQVVpQyxDQUFDLENBQUNqQyxLQUFGLENBQVF1QyxXQUFSLEVBQVY7QUFDQUwsSUFBQUEsT0FBTztBQUNSLEdBSE0sQ0FBUDtBQUlEOztlQUVjcEMsa0JBQVMwQyxLQUFULENBQWUsT0FBZixFQUF3QjNDLFVBQXhCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UsIHsgRG9jdW1lbnQsIFNjaGVtYSB9IGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCB7IGdlblNhbHQsIGhhc2ggfSBmcm9tICdiY3J5cHRqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXIgZXh0ZW5kcyBEb2N1bWVudCB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuICBmaXJzdF9uYW1lPzogc3RyaW5nO1xuICBsYXN0X25hbWU/OiBzdHJpbmc7XG59XG5cbmNvbnN0IFVzZXJTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcbiAgZW1haWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdW5pcXVlOiB0cnVlLFxuICAgIHZhbGlkYXRlOiB7XG4gICAgICB2YWxpZGF0b3I6IGVtYWlsVmFsaWRhdG9yLFxuICAgICAgbXNnOiAnZW1haWwgdmFsaWRhdGlvbiBmYWlsZWQuJ1xuICAgIH1cbiAgfSxcbiAgcGFzc3dvcmQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgZmlyc3RfbmFtZToge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBsYXN0X25hbWU6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgZGFzaGJvYXJkczogW3tcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk1peGVkXG4gICAgfSxcbiAgICB3aWRnZXRzOiBbU3RyaW5nXVxuICB9XSxcbiAgYWNjb3VudF90eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW06IFtcbiAgICAgICdmcmVlJyxcbiAgICAgICdwcmVtaXVtJ1xuICAgIF0sXG4gICAgZGVmYXVsdDogJ2ZyZWUnXG4gIH1cbn0pO1xuXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgbGV0IF90aGlzID0gPElVc2VyPnRoaXM7XG5cbiAgUHJvbWlzZS5hbGwoW1xuICAgIGhhc2hQYXNzKF90aGlzKSxcbiAgICBlbWFpbFRvTG93ZXIoX3RoaXMpXG4gIF0pXG4gIC50aGVuKCgpID0+IHtkb25lKCl9KVxuICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG5cbn0pO1xuXG5mdW5jdGlvbiBlbWFpbFZhbGlkYXRvcihlbWFpbDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLnRlc3QoZW1haWwpO1xufVxuXG4vLyB0OiBcInRoaXNcIiBpbiBjb250ZXh0XG5mdW5jdGlvbiBoYXNoUGFzcyh0OiBJVXNlcik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKCg8c3RyaW5nPnQucGFzc3dvcmQpLmxlbmd0aCA8IDgpIHtcbiAgICAgIHJlamVjdCgnd2Vha3Bhc3MnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGdlblNhbHQoMTApXG4gICAgLnRoZW4oKHNhbHQ6IHN0cmluZykgPT4ge1xuICAgICAgaGFzaCg8c3RyaW5nPnQucGFzc3dvcmQsIHNhbHQpXG4gICAgICAudGhlbigoaGFzaDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHQucGFzc3dvcmQgPSBoYXNoO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSlcbiAgICAuY2F0Y2gocmVqZWN0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVtYWlsVG9Mb3dlcih0OiBJVXNlcik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdC5lbWFpbCA9IHQuZW1haWwudG9Mb3dlckNhc2UoKTtcbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb25nb29zZS5tb2RlbCgndXNlcnMnLCBVc2VyU2NoZW1hKTsiXX0=