"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _bcryptjs = require("bcryptjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserSchema = new _mongoose.default.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    validate: {
      validator: emailValidator,
      msg: 'email validation failed.'
    }
  },
  password: {
    type: String,
    required: true
  },
  first_name: {
    type: String
  },
  last_name: {
    type: String
  }
});
UserSchema.pre('save', function (done) {
  var _this = this;

  Promise.all([hashPass(_this), emailToLower(_this)]).then(function () {
    done();
  }).catch(console.error);
});

function emailValidator(email) {
  return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
} // t: "this" in context


function hashPass(t) {
  return new Promise(function (resolve, reject) {
    if (t.password.length < 8) {
      reject('weakpass');
      return;
    }

    (0, _bcryptjs.genSalt)(10).then(function (salt) {
      (0, _bcryptjs.hash)(t.password, salt).then(function (hash) {
        t.password = hash;
        resolve();
      }).catch(reject);
    }).catch(reject);
  });
}

function emailToLower(t) {
  return new Promise(function (resolve, reject) {
    t.email = t.email.toLowerCase();
    resolve();
  });
}

var _default = _mongoose.default.model('users', UserSchema);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbC91c2VyLnRzIl0sIm5hbWVzIjpbIlVzZXJTY2hlbWEiLCJtb25nb29zZSIsIlNjaGVtYSIsImVtYWlsIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidW5pcXVlIiwidmFsaWRhdGUiLCJ2YWxpZGF0b3IiLCJlbWFpbFZhbGlkYXRvciIsIm1zZyIsInBhc3N3b3JkIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInByZSIsImRvbmUiLCJfdGhpcyIsIlByb21pc2UiLCJhbGwiLCJoYXNoUGFzcyIsImVtYWlsVG9Mb3dlciIsInRoZW4iLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsInRlc3QiLCJ0IiwicmVzb2x2ZSIsInJlamVjdCIsImxlbmd0aCIsInNhbHQiLCJoYXNoIiwidG9Mb3dlckNhc2UiLCJtb2RlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBU0EsSUFBTUEsVUFBVSxHQUFHLElBQUlDLGtCQUFTQyxNQUFiLENBQW9CO0FBQ3JDQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsSUFBSSxFQUFFQyxNQUREO0FBRUxDLElBQUFBLFFBQVEsRUFBRSxJQUZMO0FBR0xDLElBQUFBLE1BQU0sRUFBRSxJQUhIO0FBSUxDLElBQUFBLFFBQVEsRUFBRTtBQUNSQyxNQUFBQSxTQUFTLEVBQUVDLGNBREg7QUFFUkMsTUFBQUEsR0FBRyxFQUFFO0FBRkc7QUFKTCxHQUQ4QjtBQVVyQ0MsRUFBQUEsUUFBUSxFQUFFO0FBQ1JSLElBQUFBLElBQUksRUFBRUMsTUFERTtBQUVSQyxJQUFBQSxRQUFRLEVBQUU7QUFGRixHQVYyQjtBQWNyQ08sRUFBQUEsVUFBVSxFQUFFO0FBQ1ZULElBQUFBLElBQUksRUFBRUM7QUFESSxHQWR5QjtBQWlCckNTLEVBQUFBLFNBQVMsRUFBRTtBQUNUVixJQUFBQSxJQUFJLEVBQUVDO0FBREc7QUFqQjBCLENBQXBCLENBQW5CO0FBc0JBTCxVQUFVLENBQUNlLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLFVBQVNDLElBQVQsRUFBZTtBQUNwQyxNQUFJQyxLQUFLLEdBQVUsSUFBbkI7O0FBRUFDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLENBQ1ZDLFFBQVEsQ0FBQ0gsS0FBRCxDQURFLEVBRVZJLFlBQVksQ0FBQ0osS0FBRCxDQUZGLENBQVosRUFJQ0ssSUFKRCxDQUlNLFlBQU07QUFBQ04sSUFBQUEsSUFBSTtBQUFHLEdBSnBCLEVBS0NPLEtBTEQsQ0FLT0MsT0FBTyxDQUFDQyxLQUxmO0FBT0QsQ0FWRDs7QUFZQSxTQUFTZixjQUFULENBQXdCUCxLQUF4QixFQUFnRDtBQUM5QyxTQUFPLDBKQUEwSnVCLElBQTFKLENBQStKdkIsS0FBL0osQ0FBUDtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU2lCLFFBQVQsQ0FBa0JPLENBQWxCLEVBQTBDO0FBQ3hDLFNBQU8sSUFBSVQsT0FBSixDQUFZLFVBQUNVLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFhRixDQUFDLENBQUNmLFFBQVgsQ0FBcUJrQixNQUFyQixHQUE4QixDQUFsQyxFQUFxQztBQUNuQ0QsTUFBQUEsTUFBTSxDQUFDLFVBQUQsQ0FBTjtBQUVBO0FBQ0Q7O0FBRUQsMkJBQVEsRUFBUixFQUNDUCxJQURELENBQ00sVUFBQ1MsSUFBRCxFQUFrQjtBQUN0QiwwQkFBYUosQ0FBQyxDQUFDZixRQUFmLEVBQXlCbUIsSUFBekIsRUFDQ1QsSUFERCxDQUNNLFVBQUNVLElBQUQsRUFBa0I7QUFDdEJMLFFBQUFBLENBQUMsQ0FBQ2YsUUFBRixHQUFhb0IsSUFBYjtBQUNBSixRQUFBQSxPQUFPO0FBQ1IsT0FKRCxFQUtDTCxLQUxELENBS09NLE1BTFA7QUFNRCxLQVJELEVBU0NOLEtBVEQsQ0FTT00sTUFUUDtBQVVELEdBakJNLENBQVA7QUFrQkQ7O0FBRUQsU0FBU1IsWUFBVCxDQUFzQk0sQ0FBdEIsRUFBOEM7QUFDNUMsU0FBTyxJQUFJVCxPQUFKLENBQVksVUFBQ1UsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDRixJQUFBQSxDQUFDLENBQUN4QixLQUFGLEdBQVV3QixDQUFDLENBQUN4QixLQUFGLENBQVE4QixXQUFSLEVBQVY7QUFDQUwsSUFBQUEsT0FBTztBQUNSLEdBSE0sQ0FBUDtBQUlEOztlQUVjM0Isa0JBQVNpQyxLQUFULENBQWUsT0FBZixFQUF3QmxDLFVBQXhCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UsIHsgRG9jdW1lbnQgfSBmcm9tICdtb25nb29zZSc7XG5pbXBvcnQgeyBnZW5TYWx0LCBoYXNoIH0gZnJvbSAnYmNyeXB0anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVc2VyIGV4dGVuZHMgRG9jdW1lbnQge1xuICBlbWFpbDogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbiAgZmlyc3RfbmFtZT86IHN0cmluZztcbiAgbGFzdF9uYW1lPzogc3RyaW5nO1xufVxuXG5jb25zdCBVc2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGVtYWlsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICB2YWxpZGF0ZToge1xuICAgICAgdmFsaWRhdG9yOiBlbWFpbFZhbGlkYXRvcixcbiAgICAgIG1zZzogJ2VtYWlsIHZhbGlkYXRpb24gZmFpbGVkLidcbiAgICB9XG4gIH0sXG4gIHBhc3N3b3JkOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIGZpcnN0X25hbWU6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgbGFzdF9uYW1lOiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH1cbn0pO1xuXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgbGV0IF90aGlzID0gPElVc2VyPnRoaXM7XG5cbiAgUHJvbWlzZS5hbGwoW1xuICAgIGhhc2hQYXNzKF90aGlzKSxcbiAgICBlbWFpbFRvTG93ZXIoX3RoaXMpXG4gIF0pXG4gIC50aGVuKCgpID0+IHtkb25lKCl9KVxuICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG5cbn0pO1xuXG5mdW5jdGlvbiBlbWFpbFZhbGlkYXRvcihlbWFpbDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLnRlc3QoZW1haWwpO1xufVxuXG4vLyB0OiBcInRoaXNcIiBpbiBjb250ZXh0XG5mdW5jdGlvbiBoYXNoUGFzcyh0OiBJVXNlcik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKCg8c3RyaW5nPnQucGFzc3dvcmQpLmxlbmd0aCA8IDgpIHtcbiAgICAgIHJlamVjdCgnd2Vha3Bhc3MnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGdlblNhbHQoMTApXG4gICAgLnRoZW4oKHNhbHQ6IHN0cmluZykgPT4ge1xuICAgICAgaGFzaCg8c3RyaW5nPnQucGFzc3dvcmQsIHNhbHQpXG4gICAgICAudGhlbigoaGFzaDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHQucGFzc3dvcmQgPSBoYXNoO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSlcbiAgICAuY2F0Y2gocmVqZWN0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVtYWlsVG9Mb3dlcih0OiBJVXNlcik6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdC5lbWFpbCA9IHQuZW1haWwudG9Mb3dlckNhc2UoKTtcbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb25nb29zZS5tb2RlbCgndXNlcnMnLCBVc2VyU2NoZW1hKTsiXX0=